name: c++ CI
on:
    push:
        branches:
        - "**"
    pull_request:
        branches:
        - main
        - develop
jobs:
    check_format:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
            - name: Check format
              run: |
                find -name '*.cpp' -print0 | xargs -0 clang-format --Werror --dry-run
    build-clang-image:
        needs: check_format
        runs-on: ubuntu-latest
        env: 
            TAG: ${{ (github.ref == 'refs/heads/main' && 'prod') || (github.ref == 'refs/heads/develop' && 'dev') || 'testing' }}
        steps:
            - name: Checkout_code
              uses: actions/checkout@v2
            - name: Login to docker
              run:  docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
            - name: Build image
              run: | 
                docker pull ${{ secrets.USERNAME }}/clang_cpp:$TAG
                docker build -f dockerfiles/clang.Dockerfile -t ${{ secrets.USERNAME }}/clang_cpp:${{ github.run_id}} .
            - name: Push Image
              run: |
                docker push ${{ secrets.USERNAME }}/clang_cpp:${{ github.run_id}}
    build-gcc-image:
        needs: check_format
        runs-on: ubuntu-latest
        env: 
            TAG: ${{ (github.ref == 'refs/heads/main' && 'prod') || (github.ref == 'refs/heads/develop' && 'dev') || 'testing' }}
        steps:
            - name: Checkout_code
              uses: actions/checkout@v2
            - name : Login to docker
              run:  docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
            - name: Build image
              run: | 
                docker pull ${{ secrets.USERNAME }}/gcc_cpp:$TAG
                docker build -f dockerfiles/gcc_app.Dockerfile -t ${{ secrets.USERNAME }}/gcc_cpp:${{ github.run_id}} .
            - name: Push Image
              run: |
                  docker push ${{ secrets.USERNAME }}/gcc_cpp:${{ github.run_id}}
    test-gcc:
        needs: build-gcc-image
        runs-on: ubuntu-latest
        steps:
            - name: Install jq
              run: sudo apt-get install jq
            - name: Pull image
              run: |
                docker pull ${{ secrets.USERNAME }}/gcc_cpp:${{ github.run_id}}
            - name: Run Container
              run: |
                    docker run -d -it --name gcc_cpp ${{ secrets.USERNAME }}/gcc_cpp:${{ github.run_id}}
            - name : Login to docker
              run:  docker login -u ${{ secrets.USERNAME }} -p ${{ secrets.PASSWORD }}
            - name: Cleanup
              if: always()
              run: |
                   TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.USERNAME}}'", "password": "'${{ secrets.PASSWORD}}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
                   echo $TOKEN
                   curl -i -X DELETE -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ secrets.USERNAME }}/my-docker-image/tags/${{ github.run_id }}
    test-clang:
        needs: build-clang-image
        runs-on: ubuntu-latest
        steps:
            - name: Pull image
              run: |
                docker pull ${{ secrets.USERNAME }}/clang_cpp:${{ github.run_id}}
            - name: Run Container
              run: |
                    docker run -d -it --name clang_cpp ${{ secrets.USERNAME }}/clang_cpp:${{ github.run_id}}
            - name: Cleanup
              if: always()
              run: |
                   TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.USERNAME}}'", "password": "'${{ secrets.PASSWORD}}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
                   echo $TOKEN
                   curl -i -X DELETE -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ secrets.USERNAME }}/my-docker-image/tags/${{ github.run_id }}